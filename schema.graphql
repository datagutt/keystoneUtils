# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type History {
  id: ID!
  name: String
  date: DateTime
  user: User
  entity: String
  entityId: String
  operation: String
  before: JSON
  after: JSON
  inputData: JSON
  resolvedData: JSON
  item: ItemData
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type ItemData {
  type: String
  plural: String
  entityId: String
}

input HistoryWhereUniqueInput {
  id: ID
}

input HistoryWhereInput {
  AND: [HistoryWhereInput!]
  OR: [HistoryWhereInput!]
  NOT: [HistoryWhereInput!]
  id: IDFilter
  date: DateTimeNullableFilter
  user: UserWhereInput
  entity: StringFilter
  entityId: StringFilter
  operation: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input HistoryOrderByInput {
  id: OrderDirection
  date: OrderDirection
  entity: OrderDirection
  entityId: OrderDirection
  operation: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input HistoryUpdateInput {
  date: DateTime
  user: UserRelateToOneForUpdateInput
  entity: String
  entityId: String
  operation: String
  before: JSON
  after: JSON
  inputData: JSON
  resolvedData: JSON
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input HistoryUpdateArgs {
  where: HistoryWhereUniqueInput!
  data: HistoryUpdateInput!
}

input HistoryCreateInput {
  date: DateTime
  user: UserRelateToOneForCreateInput
  entity: String
  entityId: String
  operation: String
  before: JSON
  after: JSON
  inputData: JSON
  resolvedData: JSON
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Historized {
  id: ID!
  name: String
}

input HistorizedWhereUniqueInput {
  id: ID
}

input HistorizedWhereInput {
  AND: [HistorizedWhereInput!]
  OR: [HistorizedWhereInput!]
  NOT: [HistorizedWhereInput!]
  id: IDFilter
  name: StringFilter
}

input HistorizedOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input HistorizedUpdateInput {
  name: String
}

input HistorizedUpdateArgs {
  where: HistorizedWhereUniqueInput!
  data: HistorizedUpdateInput!
}

input HistorizedCreateInput {
  name: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createHistory(data: HistoryCreateInput!): History
  createHistories(data: [HistoryCreateInput!]!): [History]
  updateHistory(
    where: HistoryWhereUniqueInput!
    data: HistoryUpdateInput!
  ): History
  updateHistories(data: [HistoryUpdateArgs!]!): [History]
  deleteHistory(where: HistoryWhereUniqueInput!): History
  deleteHistories(where: [HistoryWhereUniqueInput!]!): [History]
  createHistorized(data: HistorizedCreateInput!): Historized
  createHistorizeds(data: [HistorizedCreateInput!]!): [Historized]
  updateHistorized(
    where: HistorizedWhereUniqueInput!
    data: HistorizedUpdateInput!
  ): Historized
  updateHistorizeds(data: [HistorizedUpdateArgs!]!): [Historized]
  deleteHistorized(where: HistorizedWhereUniqueInput!): Historized
  deleteHistorizeds(where: [HistorizedWhereUniqueInput!]!): [Historized]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
}

type Query {
  histories(
    where: HistoryWhereInput! = {}
    orderBy: [HistoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [History!]
  history(where: HistoryWhereUniqueInput!): History
  historiesCount(where: HistoryWhereInput! = {}): Int
  historizeds(
    where: HistorizedWhereInput! = {}
    orderBy: [HistorizedOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Historized!]
  historized(where: HistorizedWhereUniqueInput!): Historized
  historizedsCount(where: HistorizedWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
